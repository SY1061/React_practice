{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yeoboya\\\\git2\\\\router_practice\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { json, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nexport const loader = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nexport const action = async _ref2 => {\n  let {\n    params\n  } = _ref2;\n  const eventId = params.eventId;\n  await fetch('http://localhost:8080/events/' + eventId);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["json","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","EventDetailPage","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","params","id","eventId","response","fetch","ok","message","status","action","_ref2","$RefreshReg$"],"sources":["C:/Users/yeoboya/git2/router_practice/frontend/src/pages/EventDetail.js"],"sourcesContent":["import {json, useRouteLoaderData} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\nconst EventDetailPage = () => {\r\n  const data = useRouteLoaderData('event-detail');\r\n\r\n  return (\r\n    <EventItem event={data.event} />\r\n  );\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\nexport const loader = async ({request, params}) => {\r\n  const id = params.eventId;\r\n\r\n  const response = await fetch('http://localhost:8080/events/' + id);\r\n\r\n  if (!response.ok) {\r\n    throw json({message: 'Could not fetch details for selected event.'}, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport const action = async ({params}) => {\r\n  const eventId = params.eventId;\r\n  await fetch('http://localhost:8080/events/' + eventId);\r\n\r\n  if (!response.ok) {\r\n    throw json({message: 'Could not fetch details for selected event.'}, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}"],"mappings":";;AAAA,SAAQA,IAAI,EAAEC,kBAAkB,QAAO,kBAAkB;AACzD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,IAAI,GAAGN,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACEG,OAAA,CAACF,SAAS;IAACM,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAEpC,CAAC;AAAAN,EAAA,CANKD,eAAe;EAAA,QACNJ,kBAAkB;AAAA;AAAAY,EAAA,GAD3BR,eAAe;AAQrB,eAAeA,eAAe;AAE9B,OAAO,MAAMS,MAAM,GAAG,MAAAC,IAAA,IAA6B;EAAA,IAAtB;IAACC,OAAO;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC5C,MAAMG,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMtB,IAAI,CAAC;MAACuB,OAAO,EAAE;IAA6C,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACvF,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMK,MAAM,GAAG,MAAAC,KAAA,IAAoB;EAAA,IAAb;IAACT;EAAM,CAAC,GAAAS,KAAA;EACnC,MAAMP,OAAO,GAAGF,MAAM,CAACE,OAAO;EAC9B,MAAME,KAAK,CAAC,+BAA+B,GAAGF,OAAO,CAAC;EAEtD,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMtB,IAAI,CAAC;MAACuB,OAAO,EAAE;IAA6C,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACvF,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAAA,IAAAP,EAAA;AAAAc,YAAA,CAAAd,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}