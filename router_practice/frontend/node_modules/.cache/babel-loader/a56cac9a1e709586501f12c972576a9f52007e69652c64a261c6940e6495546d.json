{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yeoboya\\\\git2\\\\router_practice\\\\frontend\\\\src\\\\pages\\\\Event.js\",\n  _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { json, useLoaderData } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n};\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport const loader = async () => {\n  const response = await fetch('http://localhost:8080/eventss');\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {status: 500});\n    /*\r\n      새롭게 response 생성으로 오류를 보여주고 싶을 땐 json 형식으로 변환해서 보내고 받는 곳에서도 JSON.parse 로 파싱해줘야 함.\r\n      여기선 error.js에 위치.\r\n     */\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","json","useLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","status","$RefreshReg$"],"sources":["C:/Users/yeoboya/git2/router_practice/frontend/src/pages/Event.js"],"sourcesContent":["import EventsList from \"../components/EventsList\";\r\nimport {json, useLoaderData} from \"react-router-dom\";\r\n\r\nconst EventsPage = () => {\r\n  const data = useLoaderData();\r\n  const events = data.events;\r\n  return (\r\n      <EventsList events={events} />\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport const loader = async () => {\r\n  const response = await fetch('http://localhost:8080/eventss');\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {status: 500});\r\n    /*\r\n      새롭게 response 생성으로 오류를 보여주고 싶을 땐 json 형식으로 변환해서 보내고 받는 곳에서도 JSON.parse 로 파싱해줘야 함.\r\n      여기선 error.js에 위치.\r\n     */\r\n    throw json(\r\n      {message: 'Could not fetch events.'},\r\n      {\r\n        status: 500\r\n      }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAAQC,IAAI,EAAEC,aAAa,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGL,aAAa,EAAE;EAC5B,MAAMM,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B,oBACIJ,OAAA,CAACJ,UAAU;IAACQ,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAEpC,CAAC;AAAAN,EAAA,CANKD,UAAU;EAAA,QACDH,aAAa;AAAA;AAAAW,EAAA,GADtBR,UAAU;AAQhB,eAAeA,UAAU;AAEzB,OAAO,MAAMS,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;EAE7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;AACJ;AACA;AACA;IACI,MAAMhB,IAAI,CACR;MAACiB,OAAO,EAAE;IAAyB,CAAC,EACpC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAAA,IAAAF,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}