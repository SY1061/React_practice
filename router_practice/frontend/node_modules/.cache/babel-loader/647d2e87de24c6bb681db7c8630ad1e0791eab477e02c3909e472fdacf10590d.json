{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yeoboya\\\\git2\\\\router_practice\\\\frontend\\\\src\\\\pages\\\\Event.js\",\n  _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return (\n    /*#__PURE__*/\n    // Suspense : 다른 데이터가 도착하길 기다리는 동안 fallback 을 보여주고 싶은 경우 사용 가능.\n    _jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 25\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {status: 500});\n    /*\r\n      new response 생성으로 오류를 보여주고 싶을 땐 json 형식으로 변환해서 보내고 받는 곳에서도 JSON.parse 로 파싱해줘야 함.\r\n      여기선 error.js에 위치.\r\n     */\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nexport const loader = () => {\n  /*\r\n    이 페이지에서 움직이는 모든 http 요청을 넣어야 함. 이 프로젝트에선 현재 1개.\r\n    defer 메서드 내부에서 실행되는 메서드들은 무조건 promise를 반환해야 함. defer 메서드 자체가 값 대신 promise를 전달하여\r\n    loader에서 반환되는 값을 연기시키기 위한 메서드.\r\n   */\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","Await","defer","json","useLoaderData","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/yeoboya/git2/router_practice/frontend/src/pages/Event.js"],"sourcesContent":["import EventsList from \"../components/EventsList\";\r\nimport {Await, defer, json, useLoaderData} from \"react-router-dom\";\r\nimport {Suspense} from \"react\";\r\n\r\nconst EventsPage = () => {\r\n  const {events} = useLoaderData();\r\n\r\n  return (\r\n    // Suspense : 다른 데이터가 도착하길 기다리는 동안 fallback 을 보여주고 싶은 경우 사용 가능.\r\n    <Suspense fallback={<p>Loading...</p>}>\r\n      <Await resolve={events}>\r\n        {(loadedEvents) => <EventsList events={loadedEvents}/>}\r\n      </Await>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\nconst loadEvents = async () => {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {status: 500});\r\n    /*\r\n      new response 생성으로 오류를 보여주고 싶을 땐 json 형식으로 변환해서 보내고 받는 곳에서도 JSON.parse 로 파싱해줘야 함.\r\n      여기선 error.js에 위치.\r\n     */\r\n    throw json(\r\n      {message: 'Could not fetch events.'},\r\n      {\r\n        status: 500\r\n      }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport const loader = () => {\r\n  /*\r\n    이 페이지에서 움직이는 모든 http 요청을 넣어야 함. 이 프로젝트에선 현재 1개.\r\n    defer 메서드 내부에서 실행되는 메서드들은 무조건 promise를 반환해야 함. defer 메서드 자체가 값 대신 promise를 전달하여\r\n    loader에서 반환되는 값을 연기시키기 위한 메서드.\r\n   */\r\n  return defer({\r\n    events: loadEvents()\r\n  });\r\n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAAQC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAO,kBAAkB;AAClE,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAACC;EAAM,CAAC,GAAGN,aAAa,EAAE;EAEhC;IAAA;IACE;IACAG,OAAA,CAACF,QAAQ;MAACM,QAAQ,eAAEJ,OAAA;QAAAK,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;MAAAJ,QAAA,eACpCL,OAAA,CAACN,KAAK;QAACgB,OAAO,EAAEP,MAAO;QAAAE,QAAA,EACnBM,YAAY,iBAAKX,OAAA,CAACP,UAAU;UAACU,MAAM,EAAEQ;QAAa;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAChD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACC;AAEf,CAAC;AAAAP,EAAA,CAXKD,UAAU;EAAA,QACGJ,aAAa;AAAA;AAAAe,EAAA,GAD1BX,UAAU;AAahB,eAAeA,UAAU;AACzB,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;AACJ;AACA;AACA;IACI,MAAMpB,IAAI,CACR;MAACqB,OAAO,EAAE;IAAyB,CAAC,EACpC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMK,MAAM,GAAGA,CAAA,KAAM;EAC1B;AACF;AACA;AACA;AACA;EACE,OAAOxB,KAAK,CAAC;IACXQ,MAAM,EAAEU,UAAU;EACpB,CAAC,CAAC;AACJ,CAAC;AAAA,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}