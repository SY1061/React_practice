{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yeoboya\\\\git2\\\\router_practice\\\\frontend\\\\src\\\\App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { Fragment } from \"react\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport Root from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage from \"./pages/Event\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport EventDetailPage from \"./pages/EventDetail\";\nimport EditEventPage from \"./pages/EditEvent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: 'events',\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }, this),\n      loader: async () => {\n        const response = await fetch('http://localhost:8080/events');\n        if (!response.ok) {} else {\n          const resData = await response.json();\n          return resData.events;\n        }\n      }\n    }, {\n      path: 'events/new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: 'events/:eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: 'events/:eventId/edit',\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 20\n      }, this)\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n      router: router\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","createBrowserRouter","RouterProvider","Root","HomePage","EventsPage","NewEventPage","EventDetailPage","EditEventPage","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","loader","response","fetch","ok","resData","json","events","_c","$RefreshReg$"],"sources":["C:/Users/yeoboya/git2/router_practice/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport {Fragment} from \"react\";\nimport {createBrowserRouter, RouterProvider} from \"react-router-dom\";\nimport Root from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage from \"./pages/Event\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport EventDetailPage from \"./pages/EventDetail\";\nimport EditEventPage from \"./pages/EditEvent\";\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: '/',\n      element: <Root />,\n      children: [\n        {\n          index: true,\n          element: <HomePage />\n        },\n        {\n          path: 'events',\n          element: <EventsPage />,\n          loader: async () => {\n            const response = await fetch('http://localhost:8080/events');\n\n            if (!response.ok) {\n            } else {\n              const resData = await response.json();\n              return resData.events;\n            }\n          }\n        },\n        {\n          path: 'events/new',\n          element: <NewEventPage />\n        },\n        {\n          path: 'events/:eventId',\n          element: <EventDetailPage />\n        },\n        {\n          path: 'events/:eventId/edit',\n          element: <EditEventPage />\n        }\n      ]\n    }\n  ])\n  return (\n    <Fragment>\n      <RouterProvider router={router} />\n    </Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAAQC,mBAAmB,EAAEC,cAAc,QAAO,kBAAkB;AACpE,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,eAAe,MAAM,qBAAqB;AACjD,OAAOC,aAAa,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGX,mBAAmB,CAAC,CACjC;IACEY,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEJ,OAAA,CAACP,IAAI;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;IACjBC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MACXN,OAAO,eAAEJ,OAAA,CAACN,QAAQ;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACpB,CAAC,EACD;MACEL,IAAI,EAAE,QAAQ;MACdC,OAAO,eAAEJ,OAAA,CAACL,UAAU;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;MACvBG,MAAM,EAAE,MAAAA,CAAA,KAAY;QAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,CAClB,CAAC,MAAM;UACL,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;UACrC,OAAOD,OAAO,CAACE,MAAM;QACvB;MACF;IACF,CAAC,EACD;MACEd,IAAI,EAAE,YAAY;MAClBC,OAAO,eAAEJ,OAAA,CAACJ,YAAY;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACxB,CAAC,EACD;MACEL,IAAI,EAAE,iBAAiB;MACvBC,OAAO,eAAEJ,OAAA,CAACH,eAAe;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC3B,CAAC,EACD;MACEL,IAAI,EAAE,sBAAsB;MAC5BC,OAAO,eAAEJ,OAAA,CAACF,aAAa;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACzB,CAAC;EAEL,CAAC,CACF,CAAC;EACF,oBACER,OAAA,CAACV,QAAQ;IAAAmB,QAAA,eACPT,OAAA,CAACR,cAAc;MAACU,MAAM,EAAEA;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACzB;AAEf;AAACU,EAAA,GA3CQjB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}