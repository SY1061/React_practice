{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yeoboya\\\\git2\\\\router_practice\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, redirect, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Await, {\n      resolve: event,\n      children: loadedEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n        event: loadedEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: /*#__PURE__*/_jsxDEV(EventsList, {\n        events: events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(EventDetailPage, \"OA7jEBfO3UI1aCR8ByPCigEHUtE=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nconst loadEvent = async id => {\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.event;\n  }\n};\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {status: 500});\n    /*\r\n      new response 생성으로 오류를 보여주고 싶을 땐 json 형식으로 변환해서 보내고 받는 곳에서도 JSON.parse 로 파싱해줘야 함.\r\n      여기선 error.js에 위치.\r\n     */\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    /*\r\n      바로 useLoaderData() 로 값을 줄 때는 상관 없었으나 defer() 메서드를 거쳐서 줄 땐 수동으로 parsing 해야함.\r\n     */\n    const resData = await response.json();\n    return resData.events;\n  }\n};\nexport const loader = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.eventId;\n  return defer({\n    event: loadEvent(id),\n    events: loadEvents()\n  });\n};\nexport const action = async _ref2 => {\n  let {\n    request,\n    params\n  } = _ref2;\n  const eventId = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    // request 로 받아오는 method 값은 eventItem에 존재.\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event.'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n};\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["Await","defer","json","redirect","useRouteLoaderData","EventItem","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","event","events","children","resolve","loadedEvent","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvent","id","response","fetch","ok","message","status","resData","loadEvents","loader","_ref","request","params","eventId","action","_ref2","method","$RefreshReg$"],"sources":["C:/Users/yeoboya/git2/router_practice/frontend/src/pages/EventDetail.js"],"sourcesContent":["import {Await, defer, json, redirect, useRouteLoaderData} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nconst EventDetailPage = () => {\r\n  const {event, events} = useRouteLoaderData('event-detail');\r\n\r\n  return (\r\n    <>\r\n      <Await resolve={event}>\r\n        {loadedEvent => <EventItem event={loadedEvent} />}\r\n      </Await>\r\n      <Await resolve={events}>\r\n        <EventsList events={events}/>\r\n      </Await>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\nconst loadEvent = async (id) => {\r\n  const response = await fetch('http://localhost:8080/events/' + id);\r\n\r\n  if (!response.ok) {\r\n    throw json({message: 'Could not fetch details for selected event.'}, {status: 500});\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.event;\r\n  }\r\n}\r\n\r\nconst loadEvents = async () => {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {status: 500});\r\n    /*\r\n      new response 생성으로 오류를 보여주고 싶을 땐 json 형식으로 변환해서 보내고 받는 곳에서도 JSON.parse 로 파싱해줘야 함.\r\n      여기선 error.js에 위치.\r\n     */\r\n    throw json(\r\n      {message: 'Could not fetch events.'},\r\n      {\r\n        status: 500\r\n      }\r\n    );\r\n  } else {\r\n    /*\r\n      바로 useLoaderData() 로 값을 줄 때는 상관 없었으나 defer() 메서드를 거쳐서 줄 땐 수동으로 parsing 해야함.\r\n     */\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport const loader = async ({request, params}) => {\r\n  const id = params.eventId;\r\n\r\n  return defer({\r\n    event: loadEvent(id),\r\n    events: loadEvents()\r\n  })\r\n}\r\n\r\nexport const action = async ({request, params}) => {\r\n  const eventId = params.eventId;\r\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\r\n    // request 로 받아오는 method 값은 eventItem에 존재.\r\n    method: request.method\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json({message: 'Could not delete event.'}, {status: 500});\r\n  }\r\n\r\n  return redirect('/events');\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}